package qa.co.qnb.service.impl;

import java.util.List;
import java.util.Optional;
import java.util.stream.Collectors;

import javax.transaction.Transactional;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import qa.co.qnb.constants.Constants;
import qa.co.qnb.convertor.Convertor;
import qa.co.qnb.domain.Post;
import qa.co.qnb.dto.PostDTO;
import qa.co.qnb.exception.PostNotFoundException;
import qa.co.qnb.repository.PostRepository;
import qa.co.qnb.service.PostService;

@Transactional
@Service
public class PostServiceImpl implements PostService {
	@Autowired
	private PostRepository postRepository;
	private static final Logger logger = LoggerFactory.getLogger(PostServiceImpl.class);

	public PostDTO savePost(PostDTO dto, String documentId) {
		logger.info("dto {}", dto);
		logger.info("documentId {}", documentId);
		dto.setDocumentId(documentId);
		Post post = postRepository.save(Convertor.to(dto));
		return Convertor.from(post);
	}

	public List<PostDTO> findPostsUsingDocument(String documentId) {
		Optional<List<Post>> posts = postRepository.findPostByDocumentId(documentId);
		if (posts.isPresent()) {
			return posts.get().stream().map(
					p -> new PostDTO(p.getUuid(), p.getUserId(), p.getPostId(), p.getTitle(), p.getBody(), documentId))
					.collect(Collectors.toList());

		} else {
			throw new PostNotFoundException(Constants.POST_NOT_FOUND);
		}
	}
}
